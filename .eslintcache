[{"D:\\My Project\\bloodbank-admin\\src\\index.js":"1","D:\\My Project\\bloodbank-admin\\src\\components\\App.js":"2","D:\\My Project\\bloodbank-admin\\src\\components\\login\\login.js":"3","D:\\My Project\\bloodbank-admin\\src\\components\\sharedComponents\\copyright.js":"4","D:\\My Project\\bloodbank-admin\\src\\routes\\history.js":"5","D:\\My Project\\bloodbank-admin\\src\\components\\sharedComponents\\header.js":"6","D:\\My Project\\bloodbank-admin\\src\\store.js":"7","D:\\My Project\\bloodbank-admin\\src\\reducers\\allReducers.js":"8","D:\\My Project\\bloodbank-admin\\src\\reducers\\loginReducer.js":"9","D:\\My Project\\bloodbank-admin\\src\\actions\\actionTypes.js":"10","D:\\My Project\\bloodbank-admin\\src\\actions\\loginAction.js":"11","D:\\My Project\\bloodbank-admin\\src\\url\\apiUrl.js":"12","D:\\My Project\\bloodbank-admin\\src\\reducers\\getAllUserReducer.js":"13","D:\\My Project\\bloodbank-admin\\src\\actions\\allUsersAction.js":"14","D:\\My Project\\bloodbank-admin\\src\\components\\sharedComponents\\basicTable.js":"15","D:\\My Project\\bloodbank-admin\\src\\components\\users\\users.js":"16","D:\\My Project\\bloodbank-admin\\src\\components\\sharedComponents\\alert.js":"17","D:\\My Project\\bloodbank-admin\\src\\components\\sharedComponents\\iconType.js":"18"},{"size":346,"mtime":1607775847098,"results":"19","hashOfConfig":"20"},{"size":478,"mtime":1610715144397,"results":"21","hashOfConfig":"20"},{"size":7601,"mtime":1610715376106,"results":"22","hashOfConfig":"20"},{"size":464,"mtime":1607673858052,"results":"23","hashOfConfig":"20"},{"size":86,"mtime":1607676315331,"results":"24","hashOfConfig":"20"},{"size":4357,"mtime":1610703000872,"results":"25","hashOfConfig":"20"},{"size":244,"mtime":1607707715111,"results":"26","hashOfConfig":"20"},{"size":248,"mtime":1607765249750,"results":"27","hashOfConfig":"20"},{"size":480,"mtime":1607710316789,"results":"28","hashOfConfig":"20"},{"size":443,"mtime":1607763926191,"results":"29","hashOfConfig":"20"},{"size":1795,"mtime":1610709720180,"results":"30","hashOfConfig":"20"},{"size":852,"mtime":1610709648239,"results":"31","hashOfConfig":"20"},{"size":660,"mtime":1607767051481,"results":"32","hashOfConfig":"20"},{"size":1280,"mtime":1607772376155,"results":"33","hashOfConfig":"20"},{"size":12671,"mtime":1610709720180,"results":"34","hashOfConfig":"20"},{"size":428,"mtime":1610696086616,"results":"35","hashOfConfig":"20"},{"size":630,"mtime":1610699011464,"results":"36","hashOfConfig":"20"},{"size":144,"mtime":1610692523886,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"r65zo9",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"D:\\My Project\\bloodbank-admin\\src\\index.js",[],["77","78"],"D:\\My Project\\bloodbank-admin\\src\\components\\App.js",[],"D:\\My Project\\bloodbank-admin\\src\\components\\login\\login.js",["79"],"D:\\My Project\\bloodbank-admin\\src\\components\\sharedComponents\\copyright.js",[],"D:\\My Project\\bloodbank-admin\\src\\routes\\history.js",[],"D:\\My Project\\bloodbank-admin\\src\\components\\sharedComponents\\header.js",["80","81","82","83"],"import React, { useState, useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    SwipeableDrawer, List,\r\n    Avatar,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Grid,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport PowerSettingsNewRoundedIcon from '@material-ui/icons/PowerSettingsNewRounded';\r\nimport './modal.css'\r\nimport { apiUrl } from \"../../url/apiUrl\";\r\n\r\n\r\nconst max = 999999;\r\nconst min = 100000;\r\nfunction generateColor() {\r\n    let bgColor = Math.floor(Math\r\n        .random() * (max - min + 1)) + min;\r\n    return bgColor\r\n}\r\n\r\nlet imageColor = generateColor()\r\nconst useStyles = makeStyles({\r\n    list: {\r\n        background: 'rgba(241, 184, 184,0.1)',\r\n        height: '100%',\r\n        padding: '17px',\r\n        width: 250,\r\n    },\r\n    fullList: {\r\n        width: 'auto',\r\n    },\r\n    navItem: {\r\n        padding: '15px',\r\n        borderBottom: '2px solid black',\r\n    },\r\n    menuIcon: {\r\n        cursor: 'pointer',\r\n        fontSize: '46px',\r\n        margin: 'auto',\r\n        paddingTop: '4px',\r\n        paddingLeft: '20px'\r\n    },\r\n    randomColor: {\r\n        float: 'right',\r\n        margin: '7px',\r\n        width: '40px',\r\n        height: '40px',\r\n        background: `#${imageColor}`,\r\n        borderRadius: '50%',\r\n        cursor: 'pointer',\r\n    },\r\n    header: {\r\n        background: 'rgba(165, 21, 21, 0.9)',\r\n        padding: '5px',\r\n        margin: 0,\r\n    }\r\n});\r\n\r\nexport default function Header() {\r\n    const classes = useStyles();\r\n    const menus = ['Inbox', 'Starred', 'Send email', 'Drafts']\r\n    const [state, setState] = useState({\r\n        top: false,\r\n        left: false,\r\n        bottom: false,\r\n        right: false,\r\n    });\r\n\r\n    const [showModal, setShowModal] = useState(false)\r\n    const imageName = localStorage.getItem('image')\r\n    const name = localStorage.getItem('name')\r\n    \r\n    const toggleDrawer = (anchor, open) => (event) => {\r\n        if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n            return;\r\n        }\r\n        setState({ ...state, [anchor]: open });\r\n    };\r\n\r\n    const showPopUp = async () => {\r\n        setShowModal(true)\r\n    }\r\n    const closePopUp = async () => {\r\n        setShowModal(false)\r\n    }\r\n    const list = (anchor) => (\r\n        <div\r\n            className={clsx(classes.list, {\r\n                [classes.fullList]: anchor === 'top' || anchor === 'bottom',\r\n            })}\r\n            role=\"presentation\"\r\n            onClick={toggleDrawer(anchor, false)}\r\n            onKeyDown={toggleDrawer(anchor, false)}\r\n        >\r\n            <List>\r\n                {menus.map((text, index) => (\r\n                    <ListItem button key={text} className={classes.navItem}>\r\n                        <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                        <ListItemText primary={text} />\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n            {/* <Divider /> */}\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.header}>\r\n            <MenuIcon onClick={toggleDrawer('left', true)} className={classes.menuIcon} />\r\n            <SwipeableDrawer\r\n                anchor={'left'}\r\n                open={state['left']}\r\n                onClose={toggleDrawer('left', false)}\r\n                onOpen={toggleDrawer('left', true)}\r\n            >\r\n                {list('left')}\r\n            </SwipeableDrawer>\r\n\r\n            <Avatar variant=\"square\" className={classes.randomColor} onClick={showModal === false ? showPopUp : closePopUp}>{name}</Avatar>\r\n            {showModal && showModal ? <div className=\"cardLayout\">\r\n                <div className=\"content\">\r\n                    <Typography style={{ borderBottom: '2px solid black', paddingBottom: '6px' }}>Admin One</Typography>\r\n                    <div className=\"flex\">\r\n                        <PowerSettingsNewRoundedIcon className=\"logOut\" />\r\n                        <Typography className=\"logOut\">logout</Typography>\r\n                    </div>\r\n                </div>\r\n            </div> : null}\r\n        </div >\r\n    );\r\n}\r\n","D:\\My Project\\bloodbank-admin\\src\\store.js",[],"D:\\My Project\\bloodbank-admin\\src\\reducers\\allReducers.js",[],"D:\\My Project\\bloodbank-admin\\src\\reducers\\loginReducer.js",[],"D:\\My Project\\bloodbank-admin\\src\\actions\\actionTypes.js",[],"D:\\My Project\\bloodbank-admin\\src\\actions\\loginAction.js",[],"D:\\My Project\\bloodbank-admin\\src\\url\\apiUrl.js",[],"D:\\My Project\\bloodbank-admin\\src\\reducers\\getAllUserReducer.js",[],"D:\\My Project\\bloodbank-admin\\src\\actions\\allUsersAction.js",[],"D:\\My Project\\bloodbank-admin\\src\\components\\sharedComponents\\basicTable.js",["84","85"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { usersAction } from '../../actions/allUsersAction';\r\nimport { bindActionCreators } from 'redux';\r\nimport ReactPaginate from 'react-paginate';\r\nimport axios from \"axios\";\r\nimport { apiUrl } from '../../url/apiUrl';\r\nimport $ from 'jquery'\r\nimport { Redirect } from \"react-router\";\r\nimport AlertMessage from \"./alert\";\r\nimport Logo from \"./image.png\";\r\nimport { Success, Danger, Info } from \"./iconType\";\r\nimport './table.css'\r\n\r\nconst token = localStorage.getItem('token')\r\nclass BasicTable extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            loading: false,\r\n            users: [],\r\n            offset: 0,\r\n            perPage: 5,\r\n            pageCount: 0,\r\n            orgtableData: [],\r\n            currentPage: 0,\r\n            errorMessage: '',\r\n            waiting: 'Data loading.....',\r\n            message: '',\r\n            alertType: '',\r\n            iconType: '',\r\n        }\r\n        this.mobileUpdateStatus = this.mobileUpdateStatus.bind(this);\r\n        // this.mobileUpdateStatus = this.mobileUpdateStatus.bind(this);\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        await this.getAllUsers();\r\n    }\r\n\r\n\r\n    loadMoreData() {\r\n        const data = this.state.orgtableData;\r\n        const slice = data.slice(this.state.offset, this.state.offset + this.state.perPage)\r\n        this.setState({\r\n            pageCount: Math.ceil(data.length / this.state.perPage),\r\n            users: slice\r\n        })\r\n\r\n    }\r\n\r\n    sortUser = async (fieldName) => {\r\n        try {\r\n            this.setState({ loading: true })\r\n            let orderBy = $(this).attr('order')\r\n            const headers = {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                authorization: `Basic ${apiUrl.basicAuth}`,\r\n                token: `Bearer ${token}`\r\n            }\r\n            const newOrder = orderBy === undefined ? 1 : orderBy\r\n            const response = await axios.get(`${apiUrl.sortAllUsers}?fieldName=${fieldName}&orderBy=${parseInt(newOrder)}`, { headers })\r\n            const data = response.data.data\r\n            const slice = data.slice(this.state.offset, this.state.offset + this.state.perPage)\r\n            this.setState({\r\n                pageCount: Math.ceil(data.length / this.state.perPage),\r\n                orgtableData: data,\r\n                users: slice,\r\n                loading: false\r\n            })\r\n            if (orderBy === -1) {\r\n                $(this).attr('order', 1)\r\n            }\r\n            else {\r\n                $(this).attr('order', -1)\r\n            }\r\n        }\r\n        catch (error) {\r\n            this.setState({ message: error.message, alertType: 'danger', iconType: Danger })\r\n            setTimeout(() => this.setState({ message: '' }), 3000)\r\n        }\r\n\r\n    }\r\n\r\n    handlePageClick = (event) => {\r\n        const selectedPage = event.selected;\r\n        const offset = selectedPage * this.state.perPage;\r\n\r\n        this.setState({\r\n            currentPage: selectedPage,\r\n            offset: offset\r\n        }, () => {\r\n            this.loadMoreData()\r\n        });\r\n\r\n    }\r\n\r\n    getAllUsers = async () => {\r\n        try {\r\n            // const history = useHistory()\r\n            this.setState({ loading: true })\r\n            this.setState({ errorMessage: 'Data loading.....' })\r\n            await this.props.usersAction(token, response => {\r\n                if (response) {\r\n                    if (response.error === false) {\r\n                        const data = response.data\r\n                        const slice = data.slice(this.state.offset, this.state.offset + this.state.perPage)\r\n                        this.setState({\r\n                            pageCount: Math.ceil(data.length / this.state.perPage),\r\n                            orgtableData: data,\r\n                            users: slice,\r\n                            loading: false,\r\n                            errorMessage: ''\r\n                        })\r\n                    }\r\n                    else if (response.error === true && response.message === 'Unauthorized Access') {\r\n                        this.setState({ message: response.message, alertType: 'danger', iconType: Danger })\r\n                        this.setState({ errorMessage: response.message })\r\n                        setTimeout(() => this.setState({ message: '' }), 3000)\r\n                        window.location.assign('/')\r\n                    }\r\n                    else if (response.error === true && !response.message === 'Unauthorized Access') {\r\n                        this.setState({ message: response.message, alertType: 'info', iconType: Info })\r\n                        setTimeout(() => this.setState({ message: '' }), 3000)\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        catch (error) {\r\n            this.setState({ message: error.message, alertType: 'danger', iconType: Danger })\r\n            setTimeout(() => this.setState({ message: '' }), 3000)\r\n        }\r\n    }\r\n\r\n    sendRequest = async (id, status) => {\r\n        try {\r\n            const headers = {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                token: `Basic ${token}`\r\n            }\r\n            const response = await axios({\r\n                method: 'put',\r\n                headers,\r\n                url: `${apiUrl.updateStatus}?id=${id}`,\r\n                data: { status: status }\r\n            });\r\n            if (response && response.data.success === true) {\r\n                return response.data\r\n            }\r\n            else {\r\n                return response.data\r\n            }\r\n        }\r\n        catch (error) {\r\n            this.setState({ message: error.message, alertType: 'danger', iconType: Danger })\r\n            setTimeout(() => this.setState({ message: '' }), 3000)\r\n        }\r\n    }\r\n\r\n    updateUserStatus = async (id) => {\r\n        try {\r\n            let status = parseInt($(`#${id}`).attr('status'))\r\n            if (status === 1) {\r\n                const data = await this.sendRequest(id, 0)\r\n                if (data && data.success === true) {\r\n                    $(`#${id}`).removeClass('fa-toggle-on').addClass('fa-toggle-off')\r\n                    $(`#${id}`).attr('status', `${data.data.status}`)\r\n                    this.setState({ message: data.message, alertType: 'success', iconType: Success })\r\n                    setTimeout(() => this.setState({ message: '' }), 3000)\r\n                }\r\n                else {\r\n                    this.setState({ message: data.message, alertType: 'info', iconType: Info })\r\n                    setTimeout(() => this.setState({ message: '' }), 3000)\r\n                }\r\n            }\r\n            else {\r\n                const data = await this.sendRequest(id, 1)\r\n                if (data && data.success === true) {\r\n                    $(`#${id}`).removeClass('fa-toggle-off').addClass('fa-toggle-on')\r\n                    $(`#${id}`).attr('status', `${data.data.status}`)\r\n                    this.setState({ message: data.message, alertType: 'success', iconType: Success })\r\n                    setTimeout(() => this.setState({ message: '' }), 3000)\r\n                }\r\n                else {\r\n                    this.setState({ message: data.message, alertType: 'info', iconType: Info })\r\n                    setTimeout(() => this.setState({ message: '' }), 3000)\r\n                }\r\n            }\r\n        }\r\n        catch (error) {\r\n            this.setState({ message: error.message, alertType: 'danger', Danger })\r\n        }\r\n    }\r\n\r\n    mobileUpdateStatus() {\r\n        $(document).ready(function () {\r\n            $(\"td\").click(function () {\r\n                console.log('clicked')\r\n                alert(\"Handler for .click() called.\");\r\n                $(this).hide();\r\n            });\r\n        });\r\n    }\r\n    render() {\r\n        const dataLabel = [\r\n            'Name',\r\n            'Gender',\r\n            'Blood Group',\r\n            'City',\r\n            'Status',\r\n            'Avatar'\r\n        ]\r\n        const { waiting, loading, users, pageCount, errorMessage, alertType, message, iconType } = this.state\r\n        const imageUrl = `${apiUrl.imageUrl}images/`\r\n        return (\r\n            <div>\r\n                <div className=\"mt-4 mb-4\">\r\n                    {message && <AlertMessage alertType={alertType} message={message} iconType={iconType} />}\r\n                    {/* <CssBaseline /> */}\r\n                </div>\r\n                <div className=\"form-inline mt-5\">\r\n                    <div className=\"input-group input-group-md mb-3 search\">\r\n                        <input className=\"form-control mb-2\" type=\"search\" id=\"search-query\" placeholder=\"Search\"\r\n                            aria-label=\"Search\" style={{\r\n                                borderRadius: '7px', width: '100%', height: ' 40px',\r\n                                outline: 'hidden'\r\n                            }} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"card mb-3\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th scope=\"col\">Avatar</th>\r\n                                <th scope=\"col\"><i className=\"fas fa-sort\" order=\"1\" onClick={() => this.sortUser('first_name')}></i> Name</th>\r\n                                <th scope=\"col\"><i className=\"fas fa-sort\" order=\"1\" onClick={() => this.sortUser('gender')}></i> Gender</th>\r\n                                <th scope=\"col\"><i className=\"fas fa-sort\" order=\"1\" onClick={() => this.sortUser('blood_group')}></i> Blood Group</th>\r\n                                <th scope=\"col\"><i className=\"fas fa-sort\" order=\"1\" onClick={() => this.sortUser('city')}></i> City</th>\r\n                                <th scope=\"col\">Status</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody className=\"user-list\">\r\n                            {loading === false ? users.map((item, index) => {\r\n                                return (\r\n                                    <tr key={index}>\r\n                                        <td data-label={dataLabel[5]}>{item.profile_image ? <img src={`${imageUrl}${item.profile_image}`} style={{ width: '50px', height: '50px', borderRadius: '50%' }} alt=\"user\" /> : <img src={Logo} style={{ width: '50px', height: '50px', borderRadius: '50%' }} alt=\"user\" />}</td>\r\n                                        <td data-label={dataLabel[0]}>{item.first_name}</td>\r\n                                        <td data-label={dataLabel[1]}>{item.gender}</td>\r\n                                        <td data-label={dataLabel[2]}>{item.blood_group}</td>\r\n                                        <td data-label={dataLabel[3]}>{item.city}</td>\r\n                                        <td data-label={dataLabel[4]}>{item.status === 1 ? <i className=\"fas fa-toggle-on\" id={item._id} status={item.status} onClick={() => this.updateUserStatus(item._id)}></i> : <i className=\"fas fa-toggle-off\" status={item.status} id={item._id} onClick={() => this.updateUserStatus(item._id)}></i>}</td>\r\n                                    </tr>\r\n                                )\r\n                            }) : <tr className=\"text-center\"><td className=\"text-center\">{errorMessage}</td></tr>}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div>\r\n                    <ReactPaginate\r\n                        previousLabel={'previous'}\r\n                        nextLabel={'next'}\r\n                        breakLabel={'...'}\r\n                        breakClassName={'break-me'}\r\n                        pageCount={pageCount}\r\n                        marginPagesDisplayed={2}\r\n                        pageRangeDisplayed={5}\r\n                        onPageChange={this.handlePageClick}\r\n                        containerClassName={'pagination'}\r\n                        subContainerClassName={'pages pagination'}\r\n                        activeClassName={'active'}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { users } = state.usersReducer\r\n    // const { verified } = state.tokenReducer;\r\n    return {\r\n        users,\r\n        // verified\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => bindActionCreators({ usersAction }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BasicTable)","D:\\My Project\\bloodbank-admin\\src\\components\\users\\users.js",[],"D:\\My Project\\bloodbank-admin\\src\\components\\sharedComponents\\alert.js",[],"D:\\My Project\\bloodbank-admin\\src\\components\\sharedComponents\\iconType.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":1,"column":27,"nodeType":"92","messageId":"93","endLine":1,"endColumn":37},{"ruleId":"90","severity":1,"message":"94","line":1,"column":27,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"90","severity":1,"message":"95","line":10,"column":5,"nodeType":"92","messageId":"93","endLine":10,"endColumn":9},{"ruleId":"90","severity":1,"message":"96","line":18,"column":10,"nodeType":"92","messageId":"93","endLine":18,"endColumn":16},{"ruleId":"90","severity":1,"message":"97","line":78,"column":11,"nodeType":"92","messageId":"93","endLine":78,"endColumn":20},{"ruleId":"90","severity":1,"message":"98","line":9,"column":10,"nodeType":"92","messageId":"93","endLine":9,"endColumn":18},{"ruleId":"90","severity":1,"message":"99","line":215,"column":17,"nodeType":"92","messageId":"93","endLine":215,"endColumn":24},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'useReducer' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Grid' is defined but never used.","'apiUrl' is defined but never used.","'imageName' is assigned a value but never used.","'Redirect' is defined but never used.","'waiting' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]