[{"D:\\My Project\\bloodbank-admin\\src\\index.js":"1","D:\\My Project\\bloodbank-admin\\src\\components\\App.js":"2","D:\\My Project\\bloodbank-admin\\src\\components\\login\\login.js":"3","D:\\My Project\\bloodbank-admin\\src\\components\\sharedComponents\\copyright.js":"4","D:\\My Project\\bloodbank-admin\\src\\routes\\history.js":"5","D:\\My Project\\bloodbank-admin\\src\\components\\sharedComponents\\header.js":"6","D:\\My Project\\bloodbank-admin\\src\\store.js":"7","D:\\My Project\\bloodbank-admin\\src\\reducers\\allReducers.js":"8","D:\\My Project\\bloodbank-admin\\src\\reducers\\loginReducer.js":"9","D:\\My Project\\bloodbank-admin\\src\\actions\\actionTypes.js":"10","D:\\My Project\\bloodbank-admin\\src\\actions\\loginAction.js":"11","D:\\My Project\\bloodbank-admin\\src\\url\\apiUrl.js":"12","D:\\My Project\\bloodbank-admin\\src\\reducers\\getAllUserReducer.js":"13","D:\\My Project\\bloodbank-admin\\src\\actions\\allUsersAction.js":"14","D:\\My Project\\bloodbank-admin\\src\\components\\sharedComponents\\basicTable.js":"15","D:\\My Project\\bloodbank-admin\\src\\components\\users\\users.js":"16"},{"size":346,"mtime":1607775847098,"results":"17","hashOfConfig":"18"},{"size":556,"mtime":1608025066568,"results":"19","hashOfConfig":"18"},{"size":6516,"mtime":1608025170481,"results":"20","hashOfConfig":"18"},{"size":464,"mtime":1607673858052,"results":"21","hashOfConfig":"18"},{"size":86,"mtime":1608021437237,"results":"22","hashOfConfig":"18"},{"size":4253,"mtime":1608017895199,"results":"23","hashOfConfig":"18"},{"size":244,"mtime":1607707715111,"results":"24","hashOfConfig":"18"},{"size":248,"mtime":1607765249750,"results":"25","hashOfConfig":"18"},{"size":480,"mtime":1607710316789,"results":"26","hashOfConfig":"18"},{"size":443,"mtime":1607763926191,"results":"27","hashOfConfig":"18"},{"size":1597,"mtime":1608020053583,"results":"28","hashOfConfig":"18"},{"size":782,"mtime":1608049903328,"results":"29","hashOfConfig":"18"},{"size":660,"mtime":1607767051481,"results":"30","hashOfConfig":"18"},{"size":1280,"mtime":1607772376155,"results":"31","hashOfConfig":"18"},{"size":8558,"mtime":1608055361452,"results":"32","hashOfConfig":"18"},{"size":428,"mtime":1607854939302,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1fgsj72",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"D:\\My Project\\bloodbank-admin\\src\\index.js",[],["68","69"],"D:\\My Project\\bloodbank-admin\\src\\components\\App.js",[],"D:\\My Project\\bloodbank-admin\\src\\components\\login\\login.js",[],"D:\\My Project\\bloodbank-admin\\src\\components\\sharedComponents\\copyright.js",[],"D:\\My Project\\bloodbank-admin\\src\\routes\\history.js",[],"D:\\My Project\\bloodbank-admin\\src\\components\\sharedComponents\\header.js",[],"D:\\My Project\\bloodbank-admin\\src\\store.js",[],"D:\\My Project\\bloodbank-admin\\src\\reducers\\allReducers.js",[],"D:\\My Project\\bloodbank-admin\\src\\reducers\\loginReducer.js",[],"D:\\My Project\\bloodbank-admin\\src\\actions\\actionTypes.js",[],"D:\\My Project\\bloodbank-admin\\src\\actions\\loginAction.js",[],"D:\\My Project\\bloodbank-admin\\src\\url\\apiUrl.js",[],"D:\\My Project\\bloodbank-admin\\src\\reducers\\getAllUserReducer.js",[],"D:\\My Project\\bloodbank-admin\\src\\actions\\allUsersAction.js",[],"D:\\My Project\\bloodbank-admin\\src\\components\\sharedComponents\\basicTable.js",["70"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { usersAction } from '../../actions/allUsersAction'\r\nimport { bindActionCreators } from 'redux';\r\nimport ReactPaginate from 'react-paginate';\r\nimport axios from \"axios\";\r\nimport { apiUrl } from '../../url/apiUrl';\r\nimport ToggleOffIcon from '@material-ui/icons/ToggleOff';\r\nimport $ from 'jquery'\r\nimport Logo from \"./image.png\";\r\nimport './table.css'\r\n\r\nconst token = localStorage.getItem('token')\r\n\r\nclass BasicTable extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            loading: false,\r\n            users: [],\r\n            offset: 0,\r\n            perPage: 5,\r\n            pageCount: 0,\r\n            orgtableData: [],\r\n            currentPage: 0,\r\n            waiting: 'Data loading.....'\r\n        }\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        await this.getAllUsers();\r\n    }\r\n\r\n\r\n    loadMoreData() {\r\n        const data = this.state.orgtableData;\r\n        const slice = data.slice(this.state.offset, this.state.offset + this.state.perPage)\r\n        this.setState({\r\n            pageCount: Math.ceil(data.length / this.state.perPage),\r\n            users: slice\r\n        })\r\n\r\n    }\r\n\r\n    sortUser = async (fieldName) => {\r\n        try {\r\n            this.setState({ loading: true })\r\n            let orderBy = $(this).attr('order')\r\n            const headers = {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                authorization: `Basic ${apiUrl.basicAuth}`,\r\n                token: `Bearer ${token}`\r\n            }\r\n            const newOrder = orderBy === undefined ? 1 : orderBy\r\n            const response = await axios.get(`${apiUrl.sortAllUsers}?fieldName=${fieldName}&orderBy=${parseInt(newOrder)}`, { headers })\r\n            const data = response.data.data\r\n            const slice = data.slice(this.state.offset, this.state.offset + this.state.perPage)\r\n            this.setState({\r\n                pageCount: Math.ceil(data.length / this.state.perPage),\r\n                orgtableData: data,\r\n                users: slice,\r\n                loading: false\r\n            })\r\n            if (orderBy === -1) {\r\n                $(this).attr('order', 1)\r\n            }\r\n            else {\r\n                $(this).attr('order', -1)\r\n            }\r\n        }\r\n        catch (error) {\r\n            alert(error.message)\r\n        }\r\n\r\n    }\r\n\r\n    handlePageClick = (event) => {\r\n        const selectedPage = event.selected;\r\n        const offset = selectedPage * this.state.perPage;\r\n\r\n        this.setState({\r\n            currentPage: selectedPage,\r\n            offset: offset\r\n        }, () => {\r\n            this.loadMoreData()\r\n        });\r\n\r\n    }\r\n\r\n    getAllUsers = async () => {\r\n        try {\r\n            this.setState({ loading: true })\r\n            await this.props.usersAction(token, response => {\r\n                if (response) {\r\n                    if (response.error === false) {\r\n                        const data = response.data\r\n                        const slice = data.slice(this.state.offset, this.state.offset + this.state.perPage)\r\n                        this.setState({\r\n                            pageCount: Math.ceil(data.length / this.state.perPage),\r\n                            orgtableData: data,\r\n                            users: slice,\r\n                            loading: false\r\n                        })\r\n                    }\r\n                    else if (response.error === true) {\r\n                        alert(response.message)\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        catch (error) {\r\n            alert(error.message)\r\n        }\r\n    }\r\n\r\n    getOneUser = async (id) => {\r\n        let status = $(`#${id}`).attr('status')\r\n        console.log('userId', status)\r\n        if (status === '1') {\r\n            $(`#${id}`).removeClass('fa-toggle-on').addClass('fa-toggle-off')\r\n            $(`#${id}`).attr('status', '0')\r\n        }\r\n        else {\r\n            $(`#${id}`).removeClass('fa-toggle-off').addClass('fa-toggle-on')\r\n            $(`#${id}`).attr('status', '1')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const dataLabel = [\r\n            'Name',\r\n            'Gender',\r\n            'Blood Group',\r\n            'City',\r\n            'Status',\r\n            'Avatar'\r\n        ]\r\n        const { waiting, loading, users, pageCount } = this.state\r\n        const imageUrl = `${apiUrl.baseURL}images/`\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"form-inline mt-5\">\r\n                    <div className=\"input-group input-group-md mb-3 search\">\r\n                        <input className=\"form-control mb-2\" type=\"search\" id=\"search-query\" placeholder=\"Search\"\r\n                            aria-label=\"Search\" style={{\r\n                                borderRadius: '7px', width: '100%', height: ' 40px',\r\n                                outline: 'hidden'\r\n                            }} />\r\n                    </div>\r\n                </div>\r\n                {/* \\src\\image\\image.png */}\r\n                <div className=\"card mb-3\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th scope=\"col\">Avatar</th>\r\n                                <th scope=\"col\"><i className=\"fas fa-sort\" order=\"1\" onClick={() => this.sortUser('first_name')}></i> Name</th>\r\n                                <th scope=\"col\"><i className=\"fas fa-sort\" order=\"1\" onClick={() => this.sortUser('gender')}></i> Gender</th>\r\n                                <th scope=\"col\"><i className=\"fas fa-sort\" order=\"1\" onClick={() => this.sortUser('blood_group')}></i> Blood Group</th>\r\n                                <th scope=\"col\"><i className=\"fas fa-sort\" order=\"1\" onClick={() => this.sortUser('city')}></i> City</th>\r\n                                <th scope=\"col\">Status</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody className=\"user-list\">\r\n                            {loading === false ? users.map((item, index) => {\r\n                                return (\r\n                                    <tr key={index}>\r\n                                        <td data-label={dataLabel[5]}>{item.profile_image ? <img src={`${imageUrl}${item.profile_image}`} style={{ width: '50px', height: '50px', borderRadius: '50%' }} alt=\"user\" /> : <img src={Logo} style={{ width: '50px', height: '50px', borderRadius: '50%' }} alt=\"user\" />}</td>\r\n                                        <td data-label={dataLabel[0]}>{item.first_name}</td>\r\n                                        <td data-label={dataLabel[1]}>{item.gender}</td>\r\n                                        <td data-label={dataLabel[2]}>{item.blood_group}</td>\r\n                                        <td data-label={dataLabel[3]}>{item.city}</td>\r\n                                        <td data-label={dataLabel[4]}>{item.approved ? <i className=\"fas fa-toggle-on\" id={item._id} status=\"1\" onClick={() => this.getOneUser(item._id)}></i> : <i className=\"fas fa-toggle-off\" status=\"0\" id={item._id} onClick={() => this.getOneUser(item._id)}></i>}</td>\r\n                                    </tr>\r\n                                )\r\n                            }) : <tr className=\"text-center\"><td className=\"text-center\">{waiting}</td></tr>}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div>\r\n                    <ReactPaginate\r\n                        previousLabel={'previous'}\r\n                        nextLabel={'next'}\r\n                        breakLabel={'...'}\r\n                        breakClassName={'break-me'}\r\n                        pageCount={pageCount}\r\n                        marginPagesDisplayed={2}\r\n                        pageRangeDisplayed={5}\r\n                        onPageChange={this.handlePageClick}\r\n                        containerClassName={'pagination'}\r\n                        subContainerClassName={'pages pagination'}\r\n                        activeClassName={'active'}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { users } = state.usersReducer\r\n    return {\r\n        users\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => bindActionCreators({ usersAction }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BasicTable)","D:\\My Project\\bloodbank-admin\\src\\components\\users\\users.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":8,"column":8,"nodeType":"77","messageId":"78","endLine":8,"endColumn":21},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'ToggleOffIcon' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]